/*
File:         Simulation.cpp
Objective:    Implementation of class Simulation

*/


#include "Simulation.h"
#include "Event.h"
#include "SimConst.h"

void Simulation::run(int mins) {
	int korTill = currentTime + mins;
	if (korTill >= SIM_TIME) {
		korTill = SIM_TIME;
	}	

	while (!eventQueue.empty()) {
		Event * nextEvent = eventQueue.top();		
			eventQueue.pop();
			currentTime = nextEvent->getTime();
			nextEvent->processEvent();
			getRunning();
			getDone();
			delete nextEvent;
			if (nextEvent->getTime() >= SIM_TIME) {
				cout << "Done trains" << doneTrains.size() << endl;
				cout << "Running trains" << runTrains.size()<< endl;
				if (doneTrains.size() == 112) {
					currentTime = korTill;
					break;

				}
			}
/*		else {
			// här ?
			

			// eller här ?
		} */
	}
	currentTime = korTill;
	
	
		
}

void Simulation::scheduleEvent(Event * newEvent) {
	eventQueue.push(newEvent);
}

void addtoTrain(Event *e) {
	e->getStatus();
}

bool Simulation::compare() {
	if (doneTrains.size() == 116) {
		return true;
	}
	else {
		return false;
	}
}

void Simulation::getRunning() {
	Event * nextEvent = eventQueue.top();
	if (nextEvent->getTyp() == "Runningevent") {
		Tag *endTrain = nextEvent->getTag();

		runTrains.push_back(endTrain);
	}
}

void Simulation::getDone() {
	Event * nextEvent = eventQueue.top();
	if (nextEvent->getTyp() == "Finishevent") {
		Tag *endTrain = nextEvent->getTag();

		doneTrains.push_back(endTrain);
	}
}

bool Simulation::getRunarrived() {
	bool test = false;
	int count = 0;
	Event * nextEvent = eventQueue.top();
	Trainstatus *status = nextEvent->getStatus();

	vector<Tag*> *trainVec = status->getTagVec();

	vector<Tag*> runTrain;
	for (auto i : *trainVec) {
		runTrain.push_back(i);
	}

	if (all_of(trainVec->begin(), trainVec->end(), [](Tag* i) {return i->getTillstand() != RUNNING || i->getTillstand() != ARRIVED ;})) {
		cout << "Alla tåg har kommit fram";
		test = true;
		system("pause");
	}


	return test;
}