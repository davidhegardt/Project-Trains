#include "Datafile.h"
#include "Trainbuilder.h"
#include <string>
#include <fstream>
#include <iterator>
#include <iostream>
#include <algorithm>

using namespace std;

void Datafile::readTrainMap() {

	ifstream inFile(trainmapFile);

	string avg;
	string ank;
	int dist;
	cout << "\n Train Map \n" << endl;
	while (inFile >> avg >> ank >> dist) {
		theMap.createMap(avg, ank, dist);

	}
	theMap.printMap();
}

void Datafile::readTrainStation() {

	ifstream inFile(trainstationFile);

	string stName1, stName2, stName3, stName4, stName5, stName6;
	char par1 = '(';
	char par2 = ')';
	int id = 0;

	int typ = 0;
	int param0 = 0;
	int param1 = 0;
	Ralsfordon *rals;
	Sovvagn *sov;
	//inFile >> rals;
	string tmpString;
	vector<string> statName;
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	while (inFile.peek() != '\n') {
		inFile >> rals;
		addToStation(rals);
	}
	inFile >> stName1;
	setStationName(stName1);
	createStation();
	for (int i = 0; i < 104; i++) {
		inFile >> rals;
		addToStation(rals);
	}




	inFile.close();
}

void Datafile::createStation() {
	string statName = getStationName();

	Station *aStation = new Station(statName);

	statVec.push_back(aStation);
}

void Datafile::readTrains() {

	ifstream inFile(trainsFile);

	if (!inFile.is_open()) {
		throw runtime_error("Cannot open file");		//Throw runtime error if operation fails
	}
	inFile.exceptions(ifstream::eofbit | ifstream::failbit);
	Tag *train;
	try {
		while (inFile) {
			inFile >> train;
			tagVec.push_back(train);
		}
	}
	catch (ifstream::failure& e) {
		if (inFile.rdstate() & ifstream::eofbit) {
			cout << "EOF reached." << endl;
		}
	}

	inFile.close();
}

std::ifstream &operator >> (std::ifstream & is, Tag *&v) {
	int id = 0;
	string avg;
	string ank;
	char sep = ':';
	int avgH = 0;
	int avgMin = 0;
	int ankH = 0;
	int ankMin = 0;
	int maxSpeed = 0;
	int vagn1 = 0, vagn2 = 0, vagn3 = 0, vagn4 = 0, vagn5 = 9;
	//while (is.peek() == ':') {
	//is.ignore();
	is >> id >> avg >> ank >> avgH >> sep >> avgMin >> ankH >> sep >> ankMin >> maxSpeed >> vagn1 >> vagn2 >> vagn3 >> vagn4;

	if (is.peek() != '\n') {
		is >> vagn5;
	}

	is.get();
	Time avgTid, ankTid, delay;
	delay.setHour(0); delay.setMinutes(0);
	avgTid.setHour(avgH); avgTid.setMinutes(avgMin); ankTid.setHour(ankH); ankTid.setMinutes(ankMin);
	STATUS tillstand = NOT_ASSEMBLED;
	list<int> trainList; trainList.push_back(vagn1); trainList.push_back(vagn2); trainList.push_back(vagn3);trainList.push_back(vagn4);
	if (vagn5 != 9) { trainList.push_back(vagn5); }
	v = Trainbuilder::createTag(id, avg, ank, avgTid, ankTid, maxSpeed, delay, tillstand, trainList);
	//cout << id << avg << ank << " " << avgH << " " << avgMin << " "<< ankH <<" " << ankMin <<" " << maxSpeed << " " << vagn1 << vagn2 << vagn3 << vagn4 << vagn5 << endl;
	return is;
}

std::ifstream &operator >> (std::ifstream & is, Ralsfordon *&v) {
	int id, type, par1, par2 = 0;
	while (is.peek() == ' ' || is.peek() == '(')
		is.ignore();
	is >> id >> type >> par1;

	if (is.peek() != ')') {
		is >> par2;
	}

	is.get();
	v = Trainbuilder::createFordon(id, type, par1, par2);
	return is;
}

void Datafile::addToStation(Ralsfordon* fordon) {
	string whichStation = getStationName();
	fordon->setLocation(whichStation);
	vector<Station*>::iterator begin = statVec.begin(), end = statVec.end(), it;				// Create iterator of type T, loop through and print through iteration
	for (it = begin; it != end; it++) {
		if ((*it)->getStationName() == whichStation) {
			(*it)->addToPool(fordon);

		}
	}
}

void Datafile::printStatInfo() {
	vector<Station*>::iterator begin = statVec.begin(), end = statVec.end(), it;				// Create iterator of type T, loop through and print through iteration
	for (it = begin; it != end; it++) {
		(*it)->printInfo(2);
	}
}

void Datafile::printTrainInfo() {
	vector<Tag*>::iterator begin = tagVec.begin(), end = tagVec.end(), it;				// Create iterator of type T, loop through and print through iteration
	for (it = begin; it != end; it++) {
		cout << (*it)->getTagnummer() << endl;
		cout << (*it)->getStart() << endl;
		cout << (*it)->getDest() << endl;
	}
}

